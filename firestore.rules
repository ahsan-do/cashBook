rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    // Also allow reading other users' documents for display names (only basic info)
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Groups: users can create groups, read groups they're members of, update/delete groups they created
    match /groups/{groupId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && request.auth.uid in resource.data.members;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }
    
    // Expenses: users can create expenses, read expenses in groups they're members of, update/delete their own expenses
    match /expenses/{expenseId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (
        // Allow reading if user is the expense creator
        request.auth.uid == resource.data.paidBy ||
        // Or if user is a member of the group this expense belongs to
        request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.members
      );
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.paidBy;
    }
    
    // Group invitations: users can create invitations, read invitations sent to their email, update invitation status
    match /groupInvitations/{invitationId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (
        request.auth.token.email == resource.data.invitedEmail ||
        request.auth.uid == resource.data.invitedBy
      );
      allow update: if request.auth != null && request.auth.token.email == resource.data.invitedEmail;
    }
    
    // Test collection for debugging
    match /test/{docId} {
      allow read, write: if request.auth != null;
    }
  }
} 